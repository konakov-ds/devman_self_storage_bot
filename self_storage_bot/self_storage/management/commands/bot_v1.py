import os
from collections import defaultdict
from django.core.management.base import BaseCommand
# from cake.models import *
# from cake.serve import *
#from self_storage.handlers import order_handler
from django.core.files import File
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update, user
from telegram.ext import ConversationHandler, MessageHandler, CommandHandler, Updater, Filters, CallbackContext
from dotenv import load_dotenv
import qrcode
import time

load_dotenv()
token = os.getenv('TELEGRAM_TOKEN')


storage_info = defaultdict()

ADDRESSES = ['‚öìÔ∏è –ê–¥—Ä–µ—Å 1', '‚öìÔ∏è –ê–¥—Ä–µ—Å 2', '‚öìÔ∏è –ê–¥—Ä–µ—Å 3', '‚öìÔ∏è –ê–¥—Ä–µ—Å 4']
STORAGE_PERIODS = [
    '1 –º–µ—Å—è—Ü',
    '2 –º–µ—Å—è—Ü–∞',
    '3 –º–µ—Å—è—Ü–∞',
    '6 –º–µ—Å—è—Ü–µ–≤',
    '12 –º–µ—Å—è—Ü–µ–≤',
    '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π',
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
]

CHECKOUT_URL = 'https://www.tinkoff.ru/kassa/solution/qr/'

ADDRESSES_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                [
                    KeyboardButton(text=address),
                ]
                for address in ADDRESSES
            ],
    resize_keyboard=True
)

STORAGE_PERIODS_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                [
                    KeyboardButton(text=period),
                ]
                for period in STORAGE_PERIODS
            ],
    resize_keyboard=True
)

TYPE_STORAGE_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                    [
                        KeyboardButton(text='–°–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),
                        KeyboardButton(text='–î—Ä—É–≥–æ–µ'),
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                    ]
                ],
                resize_keyboard=True
)


def start(update, context):
    message = update.message
    user_name = message.chat.first_name
    user_id = message.chat_id

    context.bot.send_message(
        chat_id=user_id,
        text=(
            f'–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n'
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.'
            '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π!'
        ),
        reply_markup=ADDRESSES_KEYBOARD,
    )
    return 1

def select_address(update, context):
    message = update.message
    user_id = message.chat_id

    storage_info[user_id] = {}
    address = message.text
    storage_info[user_id]['address'] = address
    context.bot.send_message(
        chat_id=user_id,
        text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?',
        reply_markup=TYPE_STORAGE_KEYBOARD,
    )

    return 2

def select_storage_type(update, context):
    message = update.message
    user_id = message.chat_id

    storage_type = message.text
    storage_info[user_id]['storage_type'] = storage_type

    if storage_type == '–°–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏':
        return 3
    elif storage_type == '–î—Ä—É–≥–æ–µ':
        context.bot.send_message(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É –ø–ª–æ—â–∞–¥—å —è—á–µ–π–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è\n'
                 '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç 1 –¥–æ 10 –º2',
            reply_markup=ReplyKeyboardRemove(),
        )
        return 4

    else:
        ConversationHandler.END
        return start(update, context)


def select_storage_cell_size(update, context):
    message = update.message
    user_id = message.chat_id

    cell_size = int(message.text)

    if cell_size in range(1,10):
        price = 599 + 150*(cell_size - 1)
        storage_info[user_id]['cell_size'] = cell_size
        context.bot.send_message(
            chat_id=message.chat_id,
            text=f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç {price} —Ä—É–±–ª–µ–π\n'
                 f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è',
            reply_markup=STORAGE_PERIODS_KEYBOARD,
        )
        return 6



def select_storage_period(update, context):
    message = update.message
    user_id = message.chat_id

    storage_period = message.text

    if storage_period not in ('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        storage_info[user_id]['storage_period'] = storage_period
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É',
            reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
                        ]
                    ],
                    resize_keyboard=True
            )
        )
        return 7
    elif storage_period == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π':
      pass

    else:
        ConversationHandler.END
        return start(update, context)


def get_user_data_from_db():
    return False


def is_valid_fio(fio):
    return True


def is_valid_phone(phone):
    return True


def is_valid_passport(passport):
    return True


def is_valid_birth_date(birth_date):
    return True


def get_qr_code(chat_id):
    img = qrcode.make(chat_id)
    img.save(f'{chat_id}.png')
    return f'{chat_id}.png'


def get_user_fio_from_bot(update, context):
    user_info = get_user_data_from_db()
    if not user_info:
        message = update.message
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            reply_markup=ReplyKeyboardRemove()
        )
        return 8


def get_user_phone_from_bot(update, context):
    message = update.message
    fio = message.text
    if is_valid_fio(fio):
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000',
            reply_markup=ReplyKeyboardRemove()
        )
        storage_info[message.chat_id]['fio'] = fio
        return 9
    else:
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            reply_markup=ReplyKeyboardRemove()
        )
        return 8


def get_user_passport_from_bot(update, context):
    message = update.message
    phone = message.text
    if is_valid_phone(phone):
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞–µ—Ç–µ –°–ï–†–ò–Ø –ù–û–ú–ï–†\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä: 8805 777666',
            reply_markup=ReplyKeyboardRemove()
        )
        storage_info[message.chat_id]['phone'] = phone
        return 10
    else:
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000 ',
            reply_markup=ReplyKeyboardRemove()
        )
        return 9


def get_user_birth_date_from_bot(update, context):
    message = update.message
    passport = message.text
    if is_valid_passport(passport):
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä: 1991-08-17',
            reply_markup=ReplyKeyboardRemove()
        )
        storage_info[message.chat_id]['passport'] = passport
        return 11
    else:
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –°–ï–†–ò–Ø –ù–û–ú–ï–†',
            reply_markup=ReplyKeyboardRemove()
        )
        return 10


def create_order(update, context):
    message = update.message
    birth_date = message.text
    if is_valid_birth_date(birth_date):
        storage_info[message.chat_id]['birth_date'] = birth_date
        context.bot.send_message(
            chat_id=message.chat_id,
            text=f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n{storage_info[message.chat_id]}',
            reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å'),
                            KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                        ]
                    ],
                    resize_keyboard=True
            )
        )
        return 12
    else:
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä: 1991-08-17',
            reply_markup=ReplyKeyboardRemove()
        )
        return 11


def checkout(update, context):
    message = update.message
    choice = message.text
    if choice == '–û–ø–ª–∞—Ç–∏—Ç—å':
        context.bot.send_message(
            chat_id=message.chat_id,
            text=f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {CHECKOUT_URL}',
            reply_markup=ReplyKeyboardRemove()
        )
        qr_code_path = get_qr_code(message.chat_id)
        time.sleep(2)
        with open(qr_code_path, 'rb') as qr:
            context.bot.send_photo(
                chat_id=message.chat_id,
                photo=qr,
            )

        ConversationHandler.END
        return start(update, context)
    else:
        ConversationHandler.END
        return start(update, context)


def stop(update):
    update.message.reply_text("–°—Ç–æ–ø")
    return ConversationHandler.END


order_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        1: [MessageHandler(Filters.text, select_address, pass_user_data=True)],
        2: [MessageHandler(Filters.text, select_storage_type, pass_user_data=True)],
        4: [MessageHandler(Filters.text, select_storage_cell_size, pass_user_data=True)],
        5: [MessageHandler(Filters.text, select_storage_cell_size, pass_user_data=True)],
        6: [MessageHandler(Filters.text, select_storage_period, pass_user_data=True)],
        7: [MessageHandler(Filters.text, get_user_fio_from_bot, pass_user_data=True)],
        8: [MessageHandler(Filters.text, get_user_phone_from_bot, pass_user_data=True)],
        9: [MessageHandler(Filters.text, get_user_passport_from_bot, pass_user_data=True)],
        10: [MessageHandler(Filters.text, get_user_birth_date_from_bot, pass_user_data=True)],
        11: [MessageHandler(Filters.text, create_order, pass_user_data=True)],
        12: [MessageHandler(Filters.text, checkout, pass_user_data=True)],
    },

    fallbacks=[CommandHandler('stop', stop)]
)


class Command(BaseCommand):

    def handle(self, *args, **kwargs):
        updater = Updater(token, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(order_handler)

        updater.start_polling()
        updater.idle()
