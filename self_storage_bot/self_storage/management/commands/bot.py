import os
from collections import defaultdict
from django.core.management.base import BaseCommand
# from cake.models import *
# from cake.serve import *
#from self_storage.handlers import order_handler
from django.core.files import File
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update, user
from telegram.ext import ConversationHandler, MessageHandler, CommandHandler, Updater, Filters, CallbackContext
from dotenv import load_dotenv

load_dotenv()
token = os.getenv('TELEGRAM_TOKEN')


users_info = defaultdict()
storage_info = defaultdict()

ADDRESSES = ['‚öìÔ∏è –ê–¥—Ä–µ—Å 1', '‚öìÔ∏è –ê–¥—Ä–µ—Å 2', '‚öìÔ∏è –ê–¥—Ä–µ—Å 3', '‚öìÔ∏è –ê–¥—Ä–µ—Å 4']
STORAGE_PERIODS = [
    '1 –º–µ—Å—è—Ü',
    '1 –º–µ—Å—è—Ü–∞',
    '3 –º–µ—Å—è—Ü–∞',
    '6 –º–µ—Å—è—Ü–µ–≤',
    '12 –º–µ—Å—è—Ü–µ–≤',
    '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π',
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
]


ADDRESSES_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                [
                    KeyboardButton(text=address),
                ]
                for address in ADDRESSES
            ],
    resize_keyboard=True
)

STORAGE_PERIODS_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                [
                    KeyboardButton(text=period),
                ]
                for period in STORAGE_PERIODS
            ],
    resize_keyboard=True
)

TYPE_STORAGE_KEYBOARD = ReplyKeyboardMarkup(
    keyboard = [
                    [
                        KeyboardButton(text='–°–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),
                        KeyboardButton(text='–î—Ä—É–≥–æ–µ'),
                        KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                    ]
                ],
                resize_keyboard=True
)


def start(update, context):
    message = update.message
    user_name = message.chat.first_name
    user_id = message.chat_id

    context.bot.send_message(
        chat_id=user_id,
        text=(
            f'–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n'
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.'
            '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π!'
        ),
        reply_markup=ADDRESSES_KEYBOARD,
    )
    return 1

def select_address(update, context):
    message = update.message
    user_id = message.chat_id

    storage_info[user_id] = {}
    address = message.text
    storage_info[user_id]['address'] = address
    context.bot.send_message(
        chat_id=user_id,
        text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?',
        reply_markup=TYPE_STORAGE_KEYBOARD,
    )

    return 2

def select_storage_type(update, context):
    message = update.message
    user_id = message.chat_id

    storage_type = message.text
    storage_info[user_id]['storage_type'] = storage_type

    if storage_type == '–°–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏':
        return 3
    elif storage_type == '–î—Ä—É–≥–æ–µ':
        context.bot.send_message(
            chat_id=user_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É –ø–ª–æ—â–∞–¥—å —è—á–µ–π–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è\n'
                 '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç 1 –¥–æ 10 –º2',
            reply_markup=ReplyKeyboardRemove(),
        )
        return 4

    else:
        ConversationHandler.END
        return start(update, context)


def select_storage_cell_size(update, context):
    message = update.message
    user_id = message.chat_id

    cell_size = int(message.text)

    if cell_size in range(1,10):
        price = 599 + 150*(cell_size - 1)
        storage_info[user_id]['cell_size'] = cell_size
        context.bot.send_message(
            chat_id=message.chat_id,
            text=f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç {price} —Ä—É–±–ª–µ–π\n'
                 f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è',
            reply_markup=STORAGE_PERIODS_KEYBOARD,
        )
        return 6



def select_storage_period(update, context):
    message = update.message
    user_id = message.chat_id

    storage_period = message.text

    if storage_period not in ('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        storage_info[user_id]['storage_period'] = storage_period
        context.bot.send_message(
            chat_id=message.chat_id,
            text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É',
            reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
                        ]
                    ],
                    resize_keyboard=True
            )
        )
        return 7
    elif storage_period == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π':
      pass

    else:
        ConversationHandler.END
        return start(update, context)


def stop(update):
    update.message.reply_text("–°—Ç–æ–ø")
    return ConversationHandler.END


order_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        1: [MessageHandler(Filters.text, select_address, pass_user_data=True)],
        2: [MessageHandler(Filters.text, select_storage_type, pass_user_data=True)],
        4: [MessageHandler(Filters.text, select_storage_cell_size, pass_user_data=True)],
        5: [MessageHandler(Filters.text, select_storage_cell_size, pass_user_data=True)],
        6: [MessageHandler(Filters.text, select_storage_period, pass_user_data=True)],
    },

    fallbacks=[CommandHandler('stop', stop)]
)

class Command(BaseCommand):

    def handle(self, *args, **kwargs):
        updater = Updater(token, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(order_handler)

        updater.start_polling()
        updater.idle()
